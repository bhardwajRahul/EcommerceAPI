services:
  account:
    build:
      context: .
      dockerfile: ./account/app.dockerfile
    depends_on:
      - account_db
    environment:
      DATABASE_URL: postgres://rasadov:123456@account_db/rasadov?sslmode=disable
    restart: on-failure

  product:
    build:
      context: .
      dockerfile: ./product/app.dockerfile
    depends_on:
      - product_db
    environment:
      DATABASE_URL: http://product_db:9200
    restart: on-failure

  order:
    build:
      context: .
      dockerfile: ./order/app.dockerfile
    depends_on:
      - order_db
    environment:
      DATABASE_URL: postgres://rasadov:123456@order_db/rasadov?sslmode=disable
      ACCOUNT_SERVICE_URL: account:8080
      PRODUCT_SERVICE_URL: product:8080
    restart: on-failure

  recommender-server:
    build:
      context: .
      dockerfile: ./recommender/app.dockerfile
    command: python app/entry/main.py
    depends_on:
      - recommender_db
      - kafka
    environment:
      DATABASE_URL: postgresql://rasadov:123456@recommender_db/rasadov?sslmode=disable
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092

  recommender-sync:
    build:
      context: .
      dockerfile: ./recommender/app.dockerfile
    command: python app/entry/sync.py
    depends_on:
      - recommender_db
      - kafka
    environment:
      DATABASE_URL: postgresql://rasadov:123456@recommender_db/rasadov?sslmode=disable
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092

  graphql:
    build:
      context: .
      dockerfile: ./graphql/app.dockerfile
    ports:
      - 8080:8080
    depends_on:
      - account
      - product
    environment:
      ACCOUNT_SERVICE_URL: account:8080
      PRODUCT_SERVICE_URL: product:8080
      ORDER_SERVICE_URL: order:8080
      RECOMMENDER_SERVICE_URL: recommender:8080
    restart: on-failure

  account_db:
    image: postgres:14.0
    environment:
      POSTGRES_DB: rasadov
      POSTGRES_USER: rasadov
      POSTGRES_PASSWORD: 123456
    restart: unless-stopped

  product_db:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.2.4
    environment:
      ES_JAVA_OPTS: -Xms1g -Xmx1g
      discovery.type: single-node

  order_db:
    image: postgres:14.0
    environment:
      POSTGRES_DB: rasadov
      POSTGRES_USER: rasadov
      POSTGRES_PASSWORD: 123456
    restart: unless-stopped

  recommender_db:
    image: postgres:15
    environment:
      POSTGRES_DB: rasadov
      POSTGRES_USER: rasadov
      POSTGRES_PASSWORD: 123456
    restart: unless-stopped

  zookeeper:
    restart: always
    container_name: kafka-like-zookeeper
    image: docker.io/bitnami/zookeeper:3.8
    ports:
      - "2182:2181"
    volumes:
      - "zookeeper-volume:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: docker.io/bitnami/kafka:3.3
    depends_on:
      - zookeeper
    volumes:
      - "kafka-volume:/bitnami"
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    restart: unless-stopped

volumes:
  kafka-volume:
  zookeeper-volume: